"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rank = exports.withMemo = exports.MILLIS_PER_UNIT = void 0;
var util_1 = require("../../util");
var accumulator_1 = require("../accumulator");
var _internal_1 = require("../expression/date/_internal");
var _internal_2 = require("../pipeline/_internal");
// millis map to diffirent time units
exports.MILLIS_PER_UNIT = {
    week: _internal_1.MILLIS_PER_DAY * 7,
    day: _internal_1.MILLIS_PER_DAY,
    hour: _internal_1.MILLIS_PER_DAY / 24,
    minute: 60000,
    second: 1000,
    millisecond: 1,
};
// internal cache to store precomputed series once to avoid O(N^2) calls to over the collection
var memo = new WeakMap();
/**
 * Caches all computed values in a window sequence for reuse.
 * This is only useful for operations with unbounded documents.
 */
function withMemo(collection, expr, cacheFn, fn) {
    var _a;
    // no caching done for bounded inputs
    if (!(0, _internal_2.isUnbounded)(expr.parentExpr.output[expr.field].window)) {
        return fn(cacheFn());
    }
    // first time using collection
    if (!memo.has(collection)) {
        memo.set(collection, (_a = {}, _a[expr.field] = cacheFn(), _a));
    }
    var data = memo.get(collection);
    // subsequent computations over the same collection.
    if (data[expr.field] === undefined) {
        data[expr.field] = cacheFn();
    }
    var failed = false;
    try {
        return fn(data[expr.field]);
    }
    catch (e) {
        failed = true;
    }
    finally {
        // cleanup on failure or last element in collection.
        if (failed || expr.documentNumber === collection.length) {
            delete data[expr.field];
            if (Object.keys(data).length === 0)
                memo.delete(collection);
        }
    }
}
exports.withMemo = withMemo;
/** Returns the position of a document in the $setWindowFields stage partition. */
function rank(obj, collection, expr, options, dense) {
    return withMemo(collection, expr, function () {
        var sortKey = "$" + Object.keys(expr.parentExpr.sortBy)[0];
        var values = (0, accumulator_1.$push)(collection, sortKey, options);
        var groups = (0, util_1.groupBy)(values, function (_, n) { return values[n]; }, options.hashFunction);
        return { values: values, groups: groups };
    }, function (input) {
        var values = input.values, partitions = input.groups;
        // same number of paritions as lenght means all sort keys are unique
        if (partitions.keys.length == collection.length) {
            return expr.documentNumber;
        }
        var rank = 1;
        var current = values[expr.documentNumber - 1];
        for (var i = 0; i < partitions.keys.length; i++) {
            if ((0, util_1.isEqual)(current, partitions.keys[i])) {
                rank = dense ? i + 1 : rank;
                return rank;
            }
            rank += partitions.groups[i].length;
        }
        return rank;
    });
}
exports.rank = rank;
